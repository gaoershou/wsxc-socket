#!/usr/bin/env node

/**
 * socket config
 */

var socketConfig = {
  ssl: true, // 是否开启ssl证书模式
  // ssl_key: __dirname + '/../common/socketCert/2748517_wx.gpquan.club.key',
  // ssl_cert: __dirname + "/../common/socketCert/2748517_wx.gpquan.club.pem",
  ssl_cert: __dirname + "/../common/socketCert/cert/2748457_web.gpquan.club.pem",
  ssl_key: __dirname + '/../common/socketCert/cert/2748457_web.gpquan.club.key',

  port : 8090
};

/**
 * Module dependencies.
 */

var app = require('../app');
var socketServer = require('./socket');
var debug = require('debug')('spider:server');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || socketConfig.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

if (socketConfig.ssl == true) {
    var https = require('https');
    var fs = require('fs');
    var option = {
        cert : fs.readFileSync(socketConfig.ssl_cert, 'utf8'),
        key : fs.readFileSync(socketConfig.ssl_key, 'utf8')
    };

    var server = https.createServer(option, app);

} else {
    var http = require('http');

    var server = http.createServer(app);
}

// register socket.io
socketServer.getSocketio(socketConfig, server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
console.log("server is listening on "+ port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
